// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/RoverVelocityStatus.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    struct RoverVelocityStatus {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " Measured speed in body x direction. Positiv: forwards, Negativ: backwards")
      @unit (value="m/s")
      float measured_speed_body_x;

      @verbatim (language="comment", text=
        " Speed setpoint in body x direction. Positiv: forwards, Negativ: backwards")
      @unit (value="m/s")
      float speed_body_x_setpoint;

      @verbatim (language="comment", text=
        " Post slew rate speed setpoint in body x direction. Positiv: forwards, Negativ: backwards")
      @unit (value="m/s")
      float adjusted_speed_body_x_setpoint;

      @verbatim (language="comment", text=
        " Measured speed in body y direction. Positiv: right, Negativ: left")
      @unit (value="m/s")
      float measured_speed_body_y;

      @verbatim (language="comment", text=
        " Speed setpoint in body y direction. Positiv: right, Negativ: left (Only for mecanum rovers)")
      @unit (value="m/s")
      float speed_body_y_setpoint;

      @verbatim (language="comment", text=
        " Post slew rate speed setpoint in body y direction. Positiv: right, Negativ: left (Only for mecanum rovers)")
      @unit (value="m/s")
      float adjusted_speed_body_y_setpoint;

      @verbatim (language="comment", text=
        " Integral of the PID for the closed loop controller of the speed in body x direction")
      float pid_throttle_body_x_integral;

      @verbatim (language="comment", text=
        " Integral of the PID for the closed loop controller of the speed in body y direction")
      float pid_throttle_body_y_integral;
    };
  };
};
